<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">
    <munit:config name="human-resources-api-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/api">
        <http:request-connection host="localhost" port="8081" />
    </http:request-config>
	<munit:test name="get:\companies:human-resources-api-config-200-application\json-FlowTest" description="Verifying functionality of [get:\companies:human-resources-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="get:\companies:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock db:select" doc:id="c788156c-a6af-4e93-85b1-f50d956b95e5" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Select" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('api/json_examples/companies.json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/companies">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_companies_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" doc:id="2aab1dc8-c5dc-4359-8333-3fd9aec99fb4" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\companies:human-resources-api-config-404-application\json-FlowTest" description="Verifying functionality of [get:\companies:human-resources-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="get:\companies:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/companiess">
                <http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_404_companies_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="delete:\companies\(company_id):human-resources-api-config-204-application\json-FlowTest" description="Verifying functionality of [delete:\companies\(company_id):human-resources-api-config-204-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="delete:\companies\(company_id):human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="company_id" value="4" doc:name="company_id" />
			<munit-tools:mock-when doc:name="Mock db:delete" doc:id="4f1f874d-3753-4977-bb7c-4fd0479a0911" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Delete" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock flow-ref" doc:id="404e6030-079d-486a-a59c-6d98558da83a" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="setHttpStatusTo200_Subflow" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="#['/companies/$(vars.company_id)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(204)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 204" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is='#[MunitTools::equalTo("")]' message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="delete:\companies\(company_id):human-resources-api-config-400-application\json-FlowTest" description="Verifying functionality of [delete:\companies\(company_id):human-resources-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="delete:\companies\(company_id):human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="company_id" value="#['null']" doc:name="company_id" />
			<munit-tools:mock-when doc:name="Mock apikit:router" doc:id="046996b5-c80b-4795-8afc-b45d1d03240b" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="human-resources-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="#['/companies/$(vars.company_id)']">
                <http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/delete_400_companies_{company_id}_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="put:\companies\(company_id):application\json:human-resources-api-config-200-application\json-FlowTest" description="Verifying functionality of [put:\companies\(company_id):application\json:human-resources-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="put:\companies\(company_id):application\json:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_companies_{company_id}_application_json.json')]" />
            <set-variable variableName="company_id" value="#[4]" doc:name="company_id" />
			<munit-tools:mock-when doc:name="Mock db:update" doc:id="d47b5178-4578-4e2e-aa94-fa01c2b73a8c" processor="db:update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Update" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('scaffolder/response/put_200_companies_{company_id}_application_json.json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock set-payload" doc:id="587c7c0b-b106-4496-9132-f936a7e86a03" processor="set-payload">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set Payload" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/companies/$(vars.company_id)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/put_200_companies_{company_id}_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="put:\companies\(company_id):application\json:human-resources-api-config-400-application\json-FlowTest" description="Verifying functionality of [put:\companies\(company_id):application\json:human-resources-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="put:\companies\(company_id):application\json:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_companies_{company_id}_application_json.json')]" />
            <set-variable variableName="company_id" value="#[4]" doc:name="company_id" />
			<munit-tools:mock-when doc:name="Mock apikit:router" doc:id="8e250b48-1a01-46b6-9bfa-9d38f1a1105d" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="human-resources-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/companies/$(vars.company_id)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/put_400_companies_{company_id}_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="put:\companies\(company_id):application\json:human-resources-api-config-404-application\json-FlowTest" description="Verifying functionality of [put:\companies\(company_id):application\json:human-resources-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="put:\companies\(company_id):application\json:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_companies_{company_id}_application_json.json')]" />
            <set-variable variableName="company_id" value="#['null']" doc:name="company_id" />
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/companiess/$(vars.company_id)']">
                <http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/put_404_companies_{company_id}_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="get:\companies\(company_id):human-resources-api-config-200-application\json-FlowTest" description="Verifying functionality of [get:\companies\(company_id):human-resources-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="get:\companies\(company_id):human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="company_id" value="#[10]" doc:name="company_id" />
			<munit-tools:mock-when doc:name="Mock db:select" doc:id="b291f2da-6e04-47c2-93e1-147b645a3b63" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Select" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('api/json_examples/company.json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/companies/$(vars.company_id)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_companies_{company_id}_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" doc:id="f3ceb272-5ac2-4870-b946-3ad205729187"/>
        </munit:validation>
    </munit:test>
    <munit:test name="get:\companies\(company_id):human-resources-api-config-404-application\json-FlowTest" description="Verifying functionality of [get:\companies\(company_id):human-resources-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="get:\companies\(company_id):human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="company_id" value="#['null']" doc:name="company_id" />
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/companiess/$(vars.company_id)']">
                <http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_404_companies_{company_id}_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="post:\companies:application\json:human-resources-api-config-201-application\json-FlowTest" description="Verifying functionality of [post:\companies:application\json:human-resources-api-config-201-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="post:\companies:application\json:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_companies_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock db:insert" doc:id="c140a5c2-52fb-4ed6-b708-9ea425ca0aab" processor="db:insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Insert" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock set-payload" doc:id="ca5cc6b0-c745-4038-aa75-5797703dd775" processor="set-payload">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Set Payload" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('scaffolder/response/post_201_companies_application_json.json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/companies">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(201)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 201" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_201_companies_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\companies:application\json:human-resources-api-config-400-application\json-FlowTest" description="Verifying functionality of [post:\companies:application\json:human-resources-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="post:\companies:application\json:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_companies_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="1cb32826-5df9-4192-8474-ebbed8f00106" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="human-resources-api-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/companies">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_400_companies_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\companies:application\json:human-resources-api-config-404-application\json-FlowTest" description="Verifying functionality of [post:\companies:application\json:human-resources-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="human-resources-api-main" />
            <munit:enable-flow-source value="post:\companies:application\json:human-resources-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_companies_application_json.json')]" />
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/companiess">
                <http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/json ---payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_404_companies_application_json.json', 'application/json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
</mule>
